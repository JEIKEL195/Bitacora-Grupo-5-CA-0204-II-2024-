# Bitácora 4

## Introducción 

### Visualización y Limpieza de la Nueva Base de Datos

Queremos señalar que fue necesario cambiar la base de datos utilizada, ya que la anterior parecía haber sido generada artificialmente, sin provenir de datos reales. Para la presente bitácora, hemos optado por una base de datos auténtica que incluye información sobre pagos por defecto, factores demográficos, datos de crédito, historial de pagos y estados de cuenta de clientes de tarjetas de crédito en Taiwán, correspondiente al periodo de abril a septiembre de 2005.

Empezamos el estudio de la base de datos, para ello lo primodiarla es cargarla.

```{r}
# Cargamos nuestra nueva base de datos.
library(readr)
data_credit <- read_csv("C:/Users/Admin/Downloads/UCI_Credit_Card.csv")

# Visualizamos nuestro dataset.
data_credit
```

Una vez cargada la base de datos, es importante realizar algunas observaciones iniciales antes de comenzar a trabajar con ella. En primer lugar, queremos revisar los nombres de las variables y el tipo de datos que representan, ya que esto nos permite empezar a considerar qué técnicas estadísticas podríamos aplicar. Además, nos interesa verificar que la base de datos esté limpia; para ello, realizaremos un conteo de los valores faltantes en el dataset.

```{r}
# Verificamos los nombres de nuestro dataset
names(data_credit)
```

Con los nombres hacemos un pequeño resumen de qué significa cada uno:

-   ID: ID de cada cliente.
-   LIMIT_BAL: Monto de crédito otorgado en dólares taiwaneses (NT) (incluye crédito individual y familiar/suplementario).
-   SEX: Género (1=hombre, 2=mujer).
-   EDUCATION: Nivel educativo (1=posgrado, 2=universidad, 3=preparatoria, 4=otros, 5=desconocido, 6=desconocido).
-   MARRIAGE: Estado civil (1=casado, 2=soltero, 3=otros).
-   AGE: Edad en años.
-   PAY_0: Estado de reembolso en septiembre de 2005 (-1=pago puntual, 1=atraso de un mes, 2=atraso de dos meses, …, 8=atraso de ocho meses, 9=atraso de nueve meses o más).
-   PAY_2: Estado de reembolso en agosto de 2005 (escala igual a la anterior).
-   PAY_3: Estado de reembolso en julio de 2005 (escala igual a la anterior).
-   PAY_4: Estado de reembolso en junio de 2005 (escala igual a la anterior).
-   PAY_5: Estado de reembolso en mayo de 2005 (escala igual a la anterior).
-   PAY_6: Estado de reembolso en abril de 2005 (escala igual a la anterior).
-   BILL_AMT1: Monto del estado de cuenta en septiembre de 2005 (dólares taiwaneses, NT).
-   BILL_AMT2: Monto del estado de cuenta en agosto de 2005 (dólares taiwaneses, NT).
-   BILL_AMT3: Monto del estado de cuenta en julio de 2005 (dólares taiwaneses, NT).
-   BILL_AMT4: Monto del estado de cuenta en junio de 2005 (dólares taiwaneses, NT).
-   BILL_AMT5: Monto del estado de cuenta en mayo de 2005 (dólares taiwaneses, NT).
-   BILL_AMT6: Monto del estado de cuenta en abril de 2005 (dólares taiwaneses, NT).
-   PAY_AMT1: Monto del pago anterior en septiembre de 2005 (dólares taiwaneses, NT).
-   PAY_AMT2: Monto del pago anterior en agosto de 2005 (dólares taiwaneses, NT).
-   PAY_AMT3: Monto del pago anterior en julio de 2005 (dólares taiwaneses, NT).
-   PAY_AMT4: Monto del pago anterior en junio de 2005 (dólares taiwaneses, NT).
-   PAY_AMT5: Monto del pago anterior en mayo de 2005 (dólares taiwaneses, NT).
-   PAY_AMT6: Monto del pago anterior en abril de 2005 (dólares taiwaneses, NT).
-   default.payment.next.month: Pago en mora (1=sí, 0=no).

Por otro lado, veamos con qué tipo de datos contamos.

```{r}
# Verificar el tipo de datos del dataset.
str(data_credit)
```

Antes de hacer un pequeño conteo de la cantidad de missing value, vamos a realizar un pequeño resumen de la base de datos.

```{r}
library(skimr)

# Resumen del dataset.
summary(data_credit)

# Generamos un cuadro resumen, con la información anterior.
skim(data_credit)
```

Apesar de qué el cuadro resumen anterior ya nos indica que las variables no tienen missing value, nos parece pertinente verificarlo de manera aislada, para ello.

```{r}
#Verificamos la cantidad de datos nulos que hay nuestro dataset
sum(is.na(data_credit))

#Verificamos la cantidad de datos nulos que hay en cada columna
sapply(data_credit, function(x) sum(is.na(x)))
```

Sin embargo, hay columnas que aunque no están vacías, contiene datos que no nos sirven, por eso hay que filtrar estos datos. Estos datos no sirven por el hecho de que no están definidos como parámetros significativos, es decir, si tenemos definidos la variable sexo como 1=hombre y 2=mujer, entonces aparecen números como el 3 y 0, por ello hay que filtrarlos, ya que afectan los análisis.

Nos damos cuenta de ello, gracias a ver el cuadro resumen, que aparecen valores que no deberían aparecer.

```{r}
library(tidyverse)

# Filtramos los datos que están definidos.
data_credit <- data_credit %>%
  filter(MARRIAGE %in% c(1, 2, 3))

# Filtramos los datos que están definidos.
data_credit <- data_credit %>%
  filter(EDUCATION %in% c(1, 2, 3, 4, 5, 6))

data_credit <- data_credit %>%
  filter(PAY_0 %in% c(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9))

data_credit <- data_credit %>%
  filter(PAY_2 %in% c(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9))

data_credit <- data_credit %>%
  filter(PAY_3 %in% c(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9))

data_credit <- data_credit %>%
  filter(PAY_4 %in% c(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9))

data_credit <- data_credit %>%
  filter(PAY_5 %in% c(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9))

data_credit <- data_credit %>%
  filter(PAY_6 %in% c(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9))
```

Realizamos de nuevo nuestro cuadro resumen después de esta filtración con el objetivo de observar las nuevas tendencias de la base.

```{r}
library(skimr)

# Resumen del dataset.
summary(data_credit)

# Generamos un cuadro resumen, con la información anterior.
skim(data_credit)
```

Gracias a todo lo anterior ya tenemos una base de datos limpia, lista para el análisis estadístico.

### Análisis Estadístico de la Base de Datos

Para esta sección, nuestro objetivo es explorar el comportamiento de nuestro conjunto de datos de manera más profunda. Para ello, aplicaremos algunas técnicas estadísticas que nos permitirán obtener información relevante.

En primer lugar, vamos a construir una matriz de correlación. Esta herramienta nos ayudará a identificar las relaciones más fuertes entre las variables de nuestro dataset. Es importante recordar que la matriz de correlación solo tiene sentido cuando se aplica a variables numéricas, por lo que es esencial seleccionar adecuadamente las variables antes de proceder con este análisis.

#### Matriz de Correlación

Vamos a seleccionar solo las variables que sean de interés, es decir, vamos a quitar variables como el id, y el sexo, ya que el id es único para cada persona en el data set, y la variable sexo es una variable de tipo categórico, lo mismo pasa con la variable de defaul.payment, la cual a pesar de representarse con números, estos significan que son categóricos.

```{r}
library(tidyverse)
# Seleccionamos las variables.
data_credit_numerico <- data_credit %>% select(-ID, -SEX, -EDUCATION, -MARRIAGE, -PAY_0, -PAY_2, -PAY_3, -PAY_4, -PAY_5, -PAY_6, -default.payment.next.month)
```

Con los datos filtrados, podemos entonces realizar nuestra matriz de correlación.

```{r}
library(dplyr)
library(ggplot2)
library(reshape2)


# Crear la matriz de correlación
matriz_correlacion <- cor(data_credit_numerico, use = "complete.obs")

# Creamos la variable para ver la matriz de correlación como un gráfico de calor
base_matriz <- melt(matriz_correlacion)

# Hacemos el plot de la base 
ggplot(base_matriz, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab") + 
  theme_minimal() +
  labs(title = "Matriz de Correlación de Variables Numéricas",
       x = "", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Agregamos la misma matriz, pero esta vez indicando los índices de correlación, para visualizar de manera gráfica y matemática la correlación existente.

```{r}
library(dplyr)
library(ggplot2)
library(reshape2)


# Crear la matriz de correlación
matriz_correlacion <- cor(data_credit_numerico, use = "complete.obs")

# Creamos la variable para ver la matriz de correlación como un gráfico de calor
base_matriz <- melt(matriz_correlacion)

# Hacemos el plot de la base 
ggplot(base_matriz, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab") + 
  theme_minimal() + geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
  labs(title = "Matriz de Correlación de Variables Numéricas",
       x = "", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## 1. Parte de Planificación

## 2. Parte de Escritura 

### 2.1 Escribir, escribir, escribir

### 2.2 Introducción 

### 2.3 Resumen 

### 2.4 Ordenamiento Final 

### 2.5 Conclusión

## 3. Revisiones Finales 
